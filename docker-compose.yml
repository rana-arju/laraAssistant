version: '3.8'

services:
  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lara_assistant_api
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://mongodb:27017/lara_assistant
      - MONGO_DB_NAME=lara_assistant
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - NODE_AUTH_URL=${NODE_AUTH_URL:-http://localhost:3000}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-10}
      - USE_OPENAI_WHISPER=${USE_OPENAI_WHISPER:-true}
    depends_on:
      mongodb:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./temp:/tmp  # Temporary file storage
    networks:
      - lara_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: lara_mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=lara_assistant
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - lara_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: lara_qdrant
    ports:
      - "6333:6333"   # REST API
      - "6334:6334"   # gRPC API
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - lara_network
    restart: unless-stopped

  # Redis for Background Jobs
  redis:
    image: redis:7-alpine
    container_name: lara_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lara_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Qdrant Web UI (Optional)
  qdrant-ui:
    image: qdrant/qdrant:v1.7.4
    container_name: lara_qdrant_ui
    ports:
      - "6333:6333"
    environment:
      - QDRANT__WEB_UI__ENABLED=true
    depends_on:
      - qdrant
    networks:
      - lara_network
    restart: unless-stopped
    profiles:
      - ui

  # Background Worker for Scheduled Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lara_worker
    environment:
      - MONGO_URI=mongodb://mongodb:27017/lara_assistant
      - REDIS_URL=redis://redis:6379
      - NODE_AUTH_URL=http://localhost:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - mongodb
      - redis
    networks:
      - lara_network
    restart: unless-stopped
    command: python -m app.utils.background_jobs
    volumes:
      - ./app:/app/app

  # MongoDB Admin Interface (Optional)
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: lara_mongo_express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=pass123  # TODO: Change in production
    depends_on:
      - mongodb
    networks:
      - lara_network
    restart: unless-stopped
    profiles:
      - ui

  # Redis Commander (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: lara_redis_commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - lara_network
    restart: unless-stopped
    profiles:
      - ui

# Networks
networks:
  lara_network:
    driver: bridge

# Volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local